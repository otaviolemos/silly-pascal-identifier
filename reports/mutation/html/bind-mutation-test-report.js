document.querySelector('mutation-test-report-app').report = {"files":{"/Users/otaviolemos/Dropbox/academic/web-dev/silly-pascal-identifier/src/identifier.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":13},"start":{"column":55,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"2","location":{"end":{"column":26,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"1","location":{"end":{"column":26,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"4","location":{"end":{"column":4,"line":4},"start":{"column":28,"line":2}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"8","location":{"end":{"column":31,"line":5},"start":{"column":29,"line":5}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"9","location":{"end":{"column":26,"line":5},"start":{"column":25,"line":5}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"3","location":{"end":{"column":21,"line":2},"start":{"column":18,"line":2}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"10","location":{"end":{"column":26,"line":5},"start":{"column":25,"line":5}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"11","location":{"end":{"column":51,"line":5},"start":{"column":50,"line":5}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"6","location":{"end":{"column":53,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":4,"line":7},"start":{"column":55,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"12","location":{"end":{"column":51,"line":5},"start":{"column":50,"line":5}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"5","location":{"end":{"column":17,"line":3},"start":{"column":12,"line":3}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"15","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"14","location":{"end":{"column":17,"line":6},"start":{"column":12,"line":6}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"16","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"18","location":{"end":{"column":48,"line":8},"start":{"column":7,"line":8}},"mutatorName":"BooleanLiteral","replacement":"/^[a-zA-Z]+$/.test(identifier.charAt(0))","status":"Killed"},{"id":"19","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":9}},"mutatorName":"BooleanLiteral","replacement":"/^[0-9a-zA-Z]+$/.test(identifier)","status":"Killed"},{"id":"17","location":{"end":{"column":51,"line":8},"start":{"column":49,"line":8}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"7","location":{"end":{"column":53,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"20","location":{"end":{"column":4,"line":11},"start":{"column":43,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"21","location":{"end":{"column":17,"line":10},"start":{"column":12,"line":10}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"22","location":{"end":{"column":14,"line":12},"start":{"column":10,"line":12}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"}],"source":"export function isValid (identifier: string): boolean {\n  if (identifier === null) {\n    return false\n  }\n  if (identifier.length < 1 || identifier.length > 6) {\n    return false\n  }\n  if (!/^[a-zA-Z]+$/.test(identifier.charAt(0)) ||\n      !/^[0-9a-zA-Z]+$/.test(identifier)) {\n    return false\n  }\n  return true\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};