document.querySelector('mutation-test-report-app').report = {"files":{"/Users/otaviolemos/Dropbox/academic/web-dev/software-testing-exercises/src/identifier.spec.ts":{"language":"typescript","mutants":[{"id":"1","location":{"end":{"column":2,"line":52},"start":{"column":40,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"RuntimeError"},{"id":"0","location":{"end":{"column":32,"line":11},"start":{"column":10,"line":11}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"8","location":{"end":{"column":31,"line":18},"start":{"column":25,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"2","location":{"end":{"column":60,"line":12},"start":{"column":8,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":4,"line":20},"start":{"column":76,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"3","location":{"end":{"column":4,"line":15},"start":{"column":68,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"10","location":{"end":{"column":66,"line":22},"start":{"column":8,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"11","location":{"end":{"column":4,"line":25},"start":{"column":74,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"9","location":{"end":{"column":30,"line":19},"start":{"column":25,"line":19}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"12","location":{"end":{"column":33,"line":23},"start":{"column":25,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"4","location":{"end":{"column":32,"line":13},"start":{"column":25,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"5","location":{"end":{"column":29,"line":14},"start":{"column":25,"line":14}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"14","location":{"end":{"column":48,"line":27},"start":{"column":8,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"15","location":{"end":{"column":4,"line":30},"start":{"column":56,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"13","location":{"end":{"column":30,"line":24},"start":{"column":25,"line":24}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"16","location":{"end":{"column":27,"line":28},"start":{"column":25,"line":28}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"17","location":{"end":{"column":30,"line":29},"start":{"column":25,"line":29}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"6","location":{"end":{"column":68,"line":17},"start":{"column":8,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"18","location":{"end":{"column":60,"line":32},"start":{"column":8,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"19","location":{"end":{"column":4,"line":35},"start":{"column":68,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"20","location":{"end":{"column":36,"line":33},"start":{"column":25,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"21","location":{"end":{"column":30,"line":34},"start":{"column":25,"line":34}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"22","location":{"end":{"column":47,"line":37},"start":{"column":8,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"24","location":{"end":{"column":30,"line":40},"start":{"column":25,"line":40}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"25","location":{"end":{"column":64,"line":43},"start":{"column":8,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"23","location":{"end":{"column":4,"line":41},"start":{"column":55,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"27","location":{"end":{"column":28,"line":44},"start":{"column":25,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"26","location":{"end":{"column":4,"line":46},"start":{"column":72,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"28","location":{"end":{"column":29,"line":45},"start":{"column":25,"line":45}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"29","location":{"end":{"column":64,"line":48},"start":{"column":8,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"31","location":{"end":{"column":33,"line":49},"start":{"column":25,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"30","location":{"end":{"column":4,"line":51},"start":{"column":72,"line":48}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"32","location":{"end":{"column":29,"line":50},"start":{"column":25,"line":50}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"}],"source":"import { isValid } from './identifier'\n\n// Test cases created to cover equivalence classes:\n// (\"1234\", false) - Starts with a letter\n// (\"a12^34\", false) - Contains only letters or digits\n// (\"\", false) - len(S) = 0\n// (\"a12345678\", false) - len(S) > 6\n// (null, false) - String is null\n// (\"a1234\", true) - valid identifier\n\ndescribe('Identifier validator', () => {\n  test('should return true if string is a valid identifier', () => {\n    const ret = isValid('a1234')\n    expect(ret).toEqual(true)\n  })\n\n  test('should return false if string does not start with a letter', () => {\n    const ret = isValid('1234')\n    expect(ret).toEqual(false)\n  })\n\n  test('should return false if string contains invalid character', () => {\n    const ret = isValid('a12^34')\n    expect(ret).toEqual(false)\n  })\n\n  test('should return false if string is empty', () => {\n    const ret = isValid('')\n    expect(ret).toEqual(false)\n  })\n\n  test('should return false if string exceeds valid length', () => {\n    const ret = isValid('a12345678')\n    expect(ret).toEqual(false)\n  })\n\n  test('should return false if string is null', () => {\n    const ret = isValid(null)\n    console.log(ret)\n    expect(ret).toEqual(false)\n  })\n\n  test('should return true with valid identifier with length 1', () => {\n    const ret = isValid('i')\n    expect(ret).toEqual(true)\n  })\n\n  test('should return true with valid identifier with length 6', () => {\n    const ret = isValid('a12345')\n    expect(ret).toEqual(true)\n  })\n})\n"},"/Users/otaviolemos/Dropbox/academic/web-dev/software-testing-exercises/src/identifier.ts":{"language":"typescript","mutants":[{"id":"33","location":{"end":{"column":2,"line":13},"start":{"column":55,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"CompileError"},{"id":"34","location":{"end":{"column":26,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"35","location":{"end":{"column":26,"line":2},"start":{"column":7,"line":2}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"36","location":{"end":{"column":21,"line":2},"start":{"column":18,"line":2}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"37","location":{"end":{"column":4,"line":4},"start":{"column":28,"line":2}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":17,"line":3},"start":{"column":12,"line":3}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"39","location":{"end":{"column":53,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"40","location":{"end":{"column":53,"line":5},"start":{"column":7,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"42","location":{"end":{"column":26,"line":5},"start":{"column":25,"line":5}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"44","location":{"end":{"column":51,"line":5},"start":{"column":50,"line":5}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Killed"},{"id":"41","location":{"end":{"column":31,"line":5},"start":{"column":29,"line":5}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"43","location":{"end":{"column":26,"line":5},"start":{"column":25,"line":5}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"47","location":{"end":{"column":17,"line":6},"start":{"column":12,"line":6}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"45","location":{"end":{"column":51,"line":5},"start":{"column":50,"line":5}},"mutatorName":"EqualityOperator","replacement":">=","status":"Killed"},{"id":"46","location":{"end":{"column":4,"line":7},"start":{"column":55,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"48","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"50","location":{"end":{"column":51,"line":8},"start":{"column":49,"line":8}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"49","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"51","location":{"end":{"column":48,"line":8},"start":{"column":7,"line":8}},"mutatorName":"BooleanLiteral","replacement":"/^[a-zA-Z]+$/.test(identifier.charAt(0))","status":"Killed"},{"id":"52","location":{"end":{"column":41,"line":9},"start":{"column":7,"line":9}},"mutatorName":"BooleanLiteral","replacement":"/^[0-9a-zA-Z]+$/.test(identifier)","status":"Killed"},{"id":"53","location":{"end":{"column":4,"line":11},"start":{"column":43,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"54","location":{"end":{"column":17,"line":10},"start":{"column":12,"line":10}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"55","location":{"end":{"column":14,"line":12},"start":{"column":10,"line":12}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"}],"source":"export function isValid (identifier: string): boolean {\n  if (identifier === null) {\n    return false\n  }\n  if (identifier.length < 1 || identifier.length > 6) {\n    return false\n  }\n  if (!/^[a-zA-Z]+$/.test(identifier.charAt(0)) ||\n      !/^[0-9a-zA-Z]+$/.test(identifier)) {\n    return false\n  }\n  return true\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};